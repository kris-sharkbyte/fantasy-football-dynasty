---
description:
globs:
alwaysApply: false
---

# Admin Layout System Documentation

## 📋 Table of Contents

- [Project Overview](#project-overview)
- [Architecture Overview](#architecture-overview)
- [Theme System](#theme-system)
- [Layout Components](#layout-components)
- [Routing System](#routing-system)
- [Component Architecture](#component-architecture)
- [Styling System](#styling-system)
- [Dependencies](#dependencies)
- [Setup Instructions](#setup-instructions)
- [File Structure](#file-structure)
- [Best Practices](#best-practices)

---

## 🎯 Project Overview

- **PrimeNG components** for UI elements
- **Tailwind CSS** for utility classes and responsive design
- **Custom layout components** for navigation and theming
- **Angular signals** for state management
- **Firebase integration** for backend services
- **Role-based access control** (admin vs business users)

---

## 🏛️ Architecture Overview

### Core Principles

- **Standalone components** throughout (no NgModules)
- **Signal-based state management** for reactive UI
- **Component-based architecture** with clear separation of concerns
- **Responsive design** with mobile-first approach
- **Theme switching** with smooth transitions
- **Lazy loading** for optimal performance

### High-Level Architecture

```
┌─────────────────────────────────────────────────────────────┐
│                    App Layout (Wrapper)                     │
├─────────────────────────────────────────────────────────────┤
│  Topbar │                    Main Content                   │
├──────────┼─────────────────────────────────────────────────┤
│ Sidebar  │                                                 │
│ (Menu)   │              Router Outlet                      │
│          │                                                 │
└──────────┴─────────────────────────────────────────────────┘
```

---

## 🎨 Theme System

### Theme Architecture

The theme system uses a **multi-layered approach** combining CSS custom properties, PrimeNG themes, and Tailwind utilities.

#### Core Theme Files

```
src/assets/layout/
├── _core.scss          # Core layout styles
├── _main.scss          # Main content area
├── _topbar.scss        # Top navigation bar
├── _menu.scss          # Sidebar menu
├── _footer.scss        # Footer component
├── _responsive.scss    # Responsive breakpoints
├── _mixins.scss        # SCSS mixins and functions
├── _utils.scss         # Utility classes
├── _typography.scss    # Typography styles
└── variables/
    ├── _common.scss    # Common variables
    ├── _light.scss     # Light theme variables
    └── _dark.scss      # Dark theme variables
```

#### Theme Configuration

```typescript
interface layoutConfig {
  preset?: string; // Theme preset (Aura, etc.)
  primary?: string; // Primary color scheme
  surface?: string; // Surface color
  darkTheme?: boolean; // Dark mode toggle
  menuMode?: string; // 'static' | 'overlay'
}
```

#### Theme Features

- **Light/Dark mode toggle** with smooth transitions
- **CSS custom properties** for dynamic theming
- **Local storage persistence** of theme preferences
- **PrimeNG theme integration** with `@primeng/themes`
- **Tailwind dark mode** using `[class="app-dark"]` selector
- **View transitions API** support for modern browsers

---

## 🧩 Layout Components

### 1. Main Layout (`app.layout.ts`)

**Purpose**: Main container wrapper that orchestrates the entire layout

**Key Features**:

- **Dynamic CSS classes** based on layout state
- **Responsive behavior** (overlay vs static menu modes)
- **Mobile menu handling** with body scroll blocking
- **Router outlet** for main content
- **Event handling** for menu interactions

**Template Structure**:

```html
<div class="layout-wrapper" [ngClass]="containerClass">
  <app-topbar></app-topbar>
  <app-sidebar></app-sidebar>
  <div class="layout-main-container">
    <div class="layout-main">
      <router-outlet></router-outlet>
    </div>
    <app-footer></app-footer>
  </div>
  <div class="layout-mask animate-fadein"></div>
</div>
```

### 2. Topbar (`app.topbar.ts`)

**Purpose**: Top navigation bar with branding and user actions

**Key Features**:

- **Logo and branding** area
- **Menu toggle button** for mobile navigation
- **Theme switcher** (light/dark mode toggle)
- **Configurator panel** for layout options
- **User actions** (calendar, messages, profile)
- **Responsive behavior** for mobile devices

### 3. Sidebar (`app.sidebar.ts`)

**Purpose**: Side navigation container

**Key Features**:

- **Menu container** wrapper
- **Responsive behavior** (collapsible on mobile)
- **Static vs overlay** positioning modes
- **Smooth animations** for state changes

### 4. Menu System (`app.menu.ts`)

**Purpose**: Dynamic menu generation and management

**Key Features**:

- **Dynamic menu generation** based on user permissions
- **Role-based access** (admin vs business users)
- **Nested menu structure** with icons and labels
- **Router integration** for navigation
- **Signal-based reactivity** for permission changes

**Menu Structure Example**:

```typescript
private readonly adminMenu: MenuItem[] = [
    {
        label: 'Home',
        items: [
            { label: 'Dashboard', icon: 'pi pi-fw pi-home', routerLink: ['/'] },
            { label: 'Users', icon: 'pi pi-fw pi-users', routerLink: ['/users'] },
            // ... more items
        ]
    }
];
```

### 5. Menu Items (`app.menuitem.ts`)

**Purpose**: Individual menu item rendering and behavior

**Key Features**:

- **Recursive menu rendering** for nested items
- **Active state management** with route detection
- **Animation support** for submenu expansion
- **Accessibility features** (keyboard navigation, ARIA)
- **Event handling** for clicks and interactions

---

## 🔧 Layout Service

### Core Features

The `LayoutService` is the **central state management** system for the entire layout.

**Key Capabilities**:

- **Signal-based state management** for layout configuration
- **Theme persistence** in localStorage
- **Responsive breakpoint detection** (desktop vs mobile)
- **Menu state management** (overlay, static, mobile)
- **CSS class management** for layout modes
- **Event broadcasting** for layout changes

**State Management**:

```typescript
export class LayoutService {
  layoutConfig = signal<layoutConfig>(this._config);
  layoutState = signal<LayoutState>(this._state);

  // Computed values
  theme = computed(() => (this.layoutConfig()?.darkTheme ? 'light' : 'dark'));
  isSidebarActive = computed(
    () =>
      this.layoutState().overlayMenuActive ||
      this.layoutState().staticMenuMobileActive
  );
  isDarkTheme = computed(() => this.layoutConfig().darkTheme);
}
```

**Responsive Behavior**:

```typescript
isDesktop() {
    return window.innerWidth > 991;
}

isMobile() {
    return !this.isDesktop();
}
```

---

## 🛣️ Routing System

### Route Architecture

The routing system uses **lazy loading** and **route guards** for optimal performance and security.

#### Main Route Structure

```typescript
export const appRoutes: Routes = [
  {
    path: '',
    component: AppLayout, // Main layout wrapper
    canActivate: [AuthGuard], // Authentication guard
    children: [
      { path: '', component: DashboardComponent },
      { path: 'users', loadComponent: () => import('./users/users.component') },
      {
        path: 'business',
        loadComponent: () => import('./businesses/businesses.component'),
      },
      // ... other lazy-loaded routes
    ],
  },
  { path: 'landing', component: Landing },
  { path: 'auth', loadChildren: () => import('./auth/auth.routes') },
  { path: '**', redirectTo: '/notfound' },
];
```

#### Route Features

- **Lazy loading** for route modules and components
- **Route guards** for authentication and authorization
- **Standalone components** with dynamic imports
- **Nested routing** within the main layout
- **404 handling** with redirects

#### Route Guards

```typescript
// Authentication guard
canActivate: [AuthGuard];

// Business-specific guard
canActivate: [SelectedBusinessGuard];

// User-specific guard
canActivate: [SelectedUserGuard];
```

---

## 🎯 Component Architecture

### Standalone Components

**All components are standalone** following Angular 19 best practices.

**Key Benefits**:

- **No NgModule dependencies**
- **Direct imports** in component decorators
- **Better tree-shaking** for smaller bundles
- **Easier testing** and maintenance

**Component Structure Example**:

```typescript
@Component({
  selector: 'app-example',
  standalone: true,
  imports: [CommonModule, RouterModule, PrimeNGComponents],
  template: `...`,
  styleUrls: ['./example.component.scss'],
})
export class ExampleComponent {
  // Component logic
}
```

### Component Organization

```
src/app/
├── layout/component/          # Layout components
│   ├── app.layout.ts         # Main layout wrapper
│   ├── app.topbar.ts         # Top navigation
│   ├── app.sidebar.ts        # Side navigation
│   ├── app.menu.ts           # Menu system
│   ├── app.menuitem.ts       # Menu items
│   ├── app.footer.ts         # Footer component
│   └── app.configurator.ts   # Theme configurator
├── dashboard/                 # Dashboard views
├── users/                     # User management
├── businesses/                # Business management
├── admin/                     # Admin-specific features
├── shared/components/         # Reusable components
└── services/                  # Business logic services
```

---

## 🎨 Styling System

### CSS Architecture

The styling system combines **Tailwind CSS utilities** with **custom SCSS** for a powerful and maintainable design system.

#### Main Style Entry Point

```scss
// styles.scss - Main entry point
@use './tailwind.css'; // Tailwind utilities
@use './assets/layout/layout.scss'; // Custom layout styles
@use 'primeicons/primeicons.css'; // PrimeNG icons
@use './assets/demo/demo.scss'; // Demo/component styles
```

#### Tailwind Integration

- **Custom breakpoints** matching PrimeNG responsive system
- **PrimeUI plugin** for PrimeNG + Tailwind compatibility
- **Dark mode support** with CSS selector strategy
- **Responsive utilities** for mobile-first design

#### Tailwind Configuration

```javascript
// tailwind.config.js
import PrimeUI from 'tailwindcss-primeui';

export default {
  darkMode: ['selector', '[class="app-dark"]'],
  content: ['./src/**/*.{html,ts,scss,css}', './index.html'],
  plugins: [PrimeUI],
  theme: {
    screens: {
      sm: '576px', // PrimeNG breakpoint
      md: '768px', // PrimeNG breakpoint
      lg: '992px', // PrimeNG breakpoint
      xl: '1200px', // PrimeNG breakpoint
      '2xl': '1920px', // PrimeNG breakpoint
    },
  },
};
```
